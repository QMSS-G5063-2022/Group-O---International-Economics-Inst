j<-ggplot()+
geom_polygon(data=t, aes(x=long,y=lat, fill=prop_most, group=group))+
scale_fill_gradient(low="thistle1",high="midnightblue",na.value = "white") +
theme_map()+
guides(fill=guide_colorbar(title=""))+
theme(legend.position = c(0,.6))+
labs(title="Proportion of Air BnBs Available Year-Round",caption="Location considered year-round if available more than 2/3 days per year", subtitle="Per total number of locations by neighborhood")
k<-ggplot()+
geom_polygon(data=t,aes(x=long,y=lat,fill=prop_season,group=group))+
scale_fill_gradient(low="thistle1", high="midnightblue",na.value="white")+
theme_map()+
guides(fill=guide_colorbar(title=""))+
theme(legend.position = c(0,.6))+
labs(title="Proportion of Air BnBs Available Seasonally",caption="Location considered year-round if available less than 1/3 days per year", subtitle="Per total number of locations by neighborhood")
grid.arrange(j, k, ncol=2)
ggplot()+
geom_polygon(data=t,aes(x=long, y=lat, fill=avg_avail, group=group))+
scale_fill_viridis_c()+
theme_map()+
guides(fill=guide_colorbar(title="Average Number of Days Available"))+
theme(legend.position = c(0,.6))+
labs(title="Air BnBs Average Availability")
ggplot()+
geom_polygon(data=t,aes(x=long,y=lat,group=group), fill='grey')+
theme_map()+
geom_point(data=filter(bnb,availability_365==365), aes(x=longitude, y=latitude), colour='lightcoral', size=.6)+
labs(title="Air BnB Locations Always Available", caption='n=1,197')
rm(t)
top10<-unique(bnb[order(-bnb$most_of_year),]$neighbourhood_cleansed)[1:10]
bot10<-unique(bnb[order(-bnb$seasonal),]$neighbourhood_cleansed)[1:10]
bnb2 <- bnb %>% group_by(neighbourhood_cleansed)
ggplot(data=filter(bnb2, neighbourhood_cleansed %in% top10), aes(x=reorder(neighbourhood_cleansed,-most_of_year), fill=type)) +
geom_bar(position=position_dodge())+
coord_flip()+
theme_fivethirtyeight()+
xlab('')+
ylab('Count')+
guides(fill=guide_legend(title=""))+
scale_fill_manual(labels = c("Year-Round", "Partially Available", "Seasonal"), values = c("cyan3", "blueviolet", "lightcoral"))+
labs(title='Air BnB Availability',subtitle="Neighborhoods with the Most Year-Round Locations",caption="Year-round if available more than 2/3 of days, seasonal if less than 1/3 of days, partial otherwise")
ggplot(data=filter(bnb2, neighbourhood_cleansed %in% bot10), aes(x=reorder(neighbourhood_cleansed,-seasonal), fill=type)) +
geom_bar(position=position_dodge())+
coord_flip()+
theme_fivethirtyeight()+
xlab('')+
ylab('Count')+
guides(fill=guide_legend(title=""))+
scale_fill_manual(labels=c('Year-Round','Partially Available','Seasonal'), values=c('cyan3', 'blueviolet', 'lightcoral'))+
labs(title='Air BnB Availability',subtitle="Neighborhoods with the Most Seasonal Locations",caption="Year-round if available more than 2/3 of days, seasonal if less than 1/3 of days, partial otherwise")
rm(bnb2)
bnb_cleaner<-bnb
for(x in unique(bnb_cleaner$neighbourhood_cleansed)){
if(dim(filter(bnb_cleaner,neighbourhood_cleansed==x))[1]<50){
bnb_cleaner<-filter(bnb_cleaner,neighbourhood_cleansed!=x)
}
}
rm(x)
filter(bnb_cleaner, neighbourhood_cleansed %in% unique(bnb_cleaner[order(-bnb_cleaner$prop_most),]$neighbourhood_cleansed)[1:10])[!duplicated(filter(bnb_cleaner, neighbourhood_cleansed %in% unique(bnb_cleaner[order(-bnb_cleaner$prop_most),]$neighbourhood_cleansed)[1:10])[ , "neighbourhood_cleansed"]), ]->g
g<-g[c('neighbourhood_cleansed', 'prop_most', 'prop_season')]
g<-rbind(g,g)
g$prop<-c(rep("most",10),rep("season",10))
g$value<-c(g[1:10,'prop_most'][[1]], g[1:10,'prop_season'][[1]])
g<-g[c('neighbourhood_cleansed','prop','value')]
ggplot(g, aes(fill=prop, y=value, x=neighbourhood_cleansed)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
scale_y_continuous(limits=c(0,1))+
theme_fivethirtyeight()+
guides(fill=guide_legend(title="", ))+
scale_fill_manual(labels = c("Proportion Year-Round", "Proportion Seasonal"), values = c("cyan3", "lightcoral"))+
labs(title="Highest Proportions of Year-Round AirBnBs", subtitle="Among neighborhoods with at least 50 locations", caption = "Year-round defined as available more than 243.33 days per year; Seasonal available less than 121.67 days per year")
filter(bnb_cleaner, neighbourhood_cleansed %in% unique(bnb_cleaner[order(-bnb_cleaner$prop_season),]$neighbourhood_cleansed)[1:10])[!duplicated(filter(bnb_cleaner, neighbourhood_cleansed %in% unique(bnb_cleaner[order(-bnb_cleaner$prop_season),]$neighbourhood_cleansed)[1:10])[ , "neighbourhood_cleansed"]), ]->g
g<-g[c('neighbourhood_cleansed', 'prop_most', 'prop_season')]
g<-rbind(g,g)
g$prop<-c(rep("most",10),rep("season",10))
g$value<-c(g[1:10,'prop_most'][[1]], g[1:10,'prop_season'][[1]])
g<-g[c('neighbourhood_cleansed','prop','value')]
ggplot(g, aes(fill=prop, y=value, x=neighbourhood_cleansed)) +
geom_bar(position="stack", stat="identity")+
coord_flip()+
scale_y_continuous(limits=c(0,1))+
theme_fivethirtyeight()+
guides(fill=guide_legend(title="", ))+
scale_fill_manual(labels = c("Proportion Year-Round", "Proportion Seasonal"), values = c("cyan3", "lightcoral"))+
labs(title="Highest Proportions of Seasonal AirBnBs", subtitle="Among neighborhoods with at least 50 locations", caption = "Year-round defined as available more than 243.33 days per year; Seasonal available less than 121.67 days per year")
rm(top10,bot10, n, bnb_cleaner, bnb_shape)
bnb_sort<-bnb[order(-bnb$host_listings_count), ]
bnb$avail_month<-bnb$availability_365/12
bnb$est_prof_month<-as.numeric(gsub("[$,]","",bnb$price))*bnb$avail_month
num_locations<-c()
avg_price<-c()
tot_est_month_prof<-c()
for(i in 1:25){
num_locations[i]<-unique(filter(bnb, host_id==unique(bnb_sort$host_id)[i])$host_listings_count)
avg_price[i]<-paste0("$",round(mean(as.numeric(gsub("[$,]","",filter(bnb,host_id==unique(bnb_sort$host_id)[i])$price)),na.rm=T), 2))
tot_est_month_prof[i]<-paste0("$",sum(filter(bnb, host_id==unique(bnb_sort$host_id)[i])$est_prof_month))
}
datatable(data.frame(unique(bnb_sort$host_id)[1:25], num_locations, avg_price, tot_est_month_prof), colnames = c('Host ID','Number of Locations', 'Average Price','Estimated Possible Monthly Profit'), caption = htmltools::tags$caption( style = 'caption-side: top; text-align: left; color:black; font-size:150% ;','Top Hosts: Most Total Locations'))
rm(avg_price, i, num_locations, tot_est_month_prof, bnb_sort)
top10<-arrange(bnb %>% dplyr::count(host_id), -n)[1:25,]
avg_price<-c()
est_prof<-c()
for(u in top10$host_id){
avg_price<-append(avg_price, paste0("$",round(mean(as.numeric(gsub("[$,]","",filter(bnb, host_id==u)$price)),na.rm=T),2)))
est_prof<-append(est_prof,paste0("$",round(sum(filter(bnb, host_id==u)$est_prof_month),2)))
}
rm(u)
datatable(data.frame(top10$host_id, top10$n, avg_price, est_prof), colnames=c('Host ID', 'Number of NYC Locations', 'Average Price', 'Estimated Possible Monthly Profit'), caption = htmltools::tags$caption( style = 'caption-side: top; text-align: left; color:black; font-size:150% ;','Top Hosts: Most NYC Locations'))
rm(avg_price, est_prof, top10)
bnb_clean<-bnb
bnb_clean$price<-as.numeric(gsub("[$,]","",bnb_clean$price))
top_price<-bnb_clean[order(-bnb_clean$price),][1:100,'id']
top_rate<-bnb_clean[order(-bnb_clean$review_scores_rating),][1:100,'id']
bnb_clean<-filter(bnb_clean, ((id %in% top_price[[1]])| (id %in% top_rate[[1]])))
bnb_clean$kind<-ifelse(bnb_clean$id %in% top_price[[1]], "Most Expensive", "Top Rated")
rm(top_price, top_rate)
pal<-colorFactor(c('green','red'),domain=bnb_clean$kind)
color_kind = pal(bnb_clean$kind)
pop_cont<-paste0("Price: $", bnb_clean$price, "<br/>",
"Rating: ", bnb_clean$review_scores_rating, "<br/>",
"Room Type: ", bnb_clean$room_type, "<br/>"
)
leaflet(bnb_clean) %>%
addTiles('https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png') %>%
#addProviderTiles(provider = providers) %>%
setView(mean(bnb_clean$longitude), mean(bnb_clean$latitude)+.03, zoom = 10.5) %>%
addCircles(color=color_kind, popup=pop_cont) %>%
addLegend(pal = pal, values = ~bnb_clean$kind, title = "Air BnBs")
rm(list=ls())
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf[imf$name=="Venezuela, RB",]$name<-"Venezuela"
imf[imf$name=="United Arab Emirates",]$name<-"UAE"
imf[imf$name=="United Kingdom",]$name<-"Britain"
imf[imf$name=="United States",]$name<-"USA"
imf[imf$name=="Lao PDR",]$name<-"Laos"
imf[imf$name=="Iran, Islamic Rep.",]$name<-"Iran"
imf[imf$name=="Yemen, Rep.",]$name<-"Yemen"
imf[imf$name=="Congo, Dem. Rep.",]$name<-"Democratic Republic of the Congo"
imf[imf$name=="Congo, Rep.",]$name<-"Congo"
imf[imf$name=="Syrian Arab Republic",]$name<-"Syria"
imf[imf$name=="Egypt, Arab Rep.",]$name<-"Egypt"
imf[imf$name=="Trinidad and Tobago",]$name<-"Trinidad-Tobago"
imf[imf$name=="Bahamas, The",]$name<-"Bahamas"
imf[imf$name=="Brunei Darussalam",]$name<-"Brunei"
imf[imf$name=="Korea, Dem. People's Rep.",]$name<-"North Korea"
imf[imf$name=="Korea, Rep.",]$name<-"South Korea"
imf[imf$name=="Bosnia and Herzegovina",]$name<-"Bosnia"
imf[imf$name=="Kyrgyz Republic",]$name<-"Kyrgyzstan"
imf[imf$name=="Cote d'Ivoire",]$name<-"Ivory Coast"
imf[imf$name=="Sao Tome and Principe",]$name<-"Sao Tome"
imf[imf$name=="Cabo Verde",]$name<-"Cape Verde"
imf[imf$name=="North Macedonia",]$name<-"Macedonia"
View(imf)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(rgdal))
suppressPackageStartupMessages(library(WDI))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(bslib))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ggthemes))
suppressPackageStartupMessages(library(network))
suppressPackageStartupMessages(library(maps))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MetBrewer))
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
oman<-filter(imf, name=="Oman")
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
View(imf)
imf<-rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
imf<-dplyr::rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
View(imf)
om<-filter(imf, name=="Oman")
imf[imf$name=="Venezuela, RB",]$name<-"Venezuela"
imf[imf$name=="United Arab Emirates",]$name<-"UAE"
imf[imf$name=="United Kingdom",]$name<-"Britain"
imf[imf$name=="United States",]$name<-"USA"
imf[imf$name=="Lao PDR",]$name<-"Laos"
imf[imf$name=="Iran, Islamic Rep.",]$name<-"Iran"
imf[imf$name=="Yemen, Rep.",]$name<-"Yemen"
imf[imf$name=="Congo, Dem. Rep.",]$name<-"Democratic Republic of the Congo"
imf[imf$name=="Congo, Rep.",]$name<-"Congo"
imf[imf$name=="Syrian Arab Republic",]$name<-"Syria"
imf[imf$name=="Egypt, Arab Rep.",]$name<-"Egypt"
imf[imf$name=="Trinidad and Tobago",]$name<-"Trinidad-Tobago"
imf[imf$name=="Bahamas, The",]$name<-"Bahamas"
imf[imf$name=="Brunei Darussalam",]$name<-"Brunei"
imf[imf$name=="Korea, Dem. People's Rep.",]$name<-"North Korea"
imf[imf$name=="Korea, Rep.",]$name<-"South Korea"
imf[imf$name=="Bosnia and Herzegovina",]$name<-"Bosnia"
imf[imf$name=="Kyrgyz Republic",]$name<-"Kyrgyzstan"
imf[imf$name=="Cote d'Ivoire",]$name<-"Ivory Coast"
imf[imf$name=="Sao Tome and Principe",]$name<-"Sao Tome"
imf[imf$name=="Cabo Verde",]$name<-"Cape Verde"
imf[imf$name=="North Macedonia",]$name<-"Macedonia"
View(om)
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
shiny::runApp()
runApp()
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-dplyr::rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
View(imf)
imf[imf$name=="Venezuela, RB",]$name<-"Venezuela"
imf[imf$name=="United Arab Emirates",]$name<-"UAE"
imf[imf$name=="United Kingdom",]$name<-"Britain"
imf[imf$name=="United States",]$name<-"USA"
imf[imf$name=="Lao PDR",]$name<-"Laos"
imf[imf$name=="Iran, Islamic Rep.",]$name<-"Iran"
imf[imf$name=="Yemen, Rep.",]$name<-"Yemen"
imf[imf$name=="Congo, Dem. Rep.",]$name<-"Democratic Republic of the Congo"
imf[imf$name=="Congo, Rep.",]$name<-"Congo"
imf[imf$name=="Syrian Arab Republic",]$name<-"Syria"
imf[imf$name=="Egypt, Arab Rep.",]$name<-"Egypt"
imf[imf$name=="Trinidad and Tobago",]$name<-"Trinidad-Tobago"
imf[imf$name=="Bahamas, The",]$name<-"Bahamas"
imf[imf$name=="Brunei Darussalam",]$name<-"Brunei"
imf[imf$name=="Korea, Dem. People's Rep.",]$name<-"North Korea"
imf[imf$name=="Korea, Rep.",]$name<-"South Korea"
imf[imf$name=="Bosnia and Herzegovina",]$name<-"Bosnia"
imf[imf$name=="Kyrgyz Republic",]$name<-"Kyrgyzstan"
imf[imf$name=="Cote d'Ivoire",]$name<-"Ivory Coast"
imf[imf$name=="Sao Tome and Principe",]$name<-"Sao Tome"
imf[imf$name=="Cabo Verde",]$name<-"Cape Verde"
imf[imf$name=="North Macedonia",]$name<-"Macedonia"
imf_<-filter(imf, name=="USA")
library(ggplot2)
ggplot(imf_, aes(x=Year, y=IMF_cred))+
geom_line()+
geom_point()
View(imf_)
View(imf)
imf_<-filter(imf, name=="Afghanistan")
ggplot(imf_, aes(x=Year, y=IMF_cred))+
geom_line()+
geom_point()
typeof(imf_$Year)
typeof(imf_$IMF_cred)
runApp()
imf<-imf %>%
group_by(Year) %>%
mutate(`Annual Total`=sum(IMF_cred))
View(imf)
imf<-imf %>%
group_by(Year) %>%
mutate(`Annual Total`=sum(IMF_cred, na.rm=T))
View(imf)
View(imf[!duplicated(imf$Year),])
runApp()
runApp()
chn_inv<-read.csv('China-Global-Investment-Tracker-2021-Fall-FINAL-2022.2.21-update.up.csv')
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-dplyr::rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
imf<-right_join(imf, chn_inv[c("Country","Region")], by=c("name"="Country"))
View(imf)
runApp()
imf_<-right_join(imf, chn_inv[c("Country","Region")], by=c("name"="Country"))
View(imf_)
imf<-imf[1:4,]
View(imf)
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-dplyr::rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
imf[imf$name=="Venezuela, RB",]$name<-"Venezuela"
imf[imf$name=="United Arab Emirates",]$name<-"UAE"
imf[imf$name=="United Kingdom",]$name<-"Britain"
imf[imf$name=="United States",]$name<-"USA"
imf[imf$name=="Lao PDR",]$name<-"Laos"
imf[imf$name=="Iran, Islamic Rep.",]$name<-"Iran"
imf[imf$name=="Yemen, Rep.",]$name<-"Yemen"
imf[imf$name=="Congo, Dem. Rep.",]$name<-"Democratic Republic of the Congo"
imf[imf$name=="Congo, Rep.",]$name<-"Congo"
imf[imf$name=="Syrian Arab Republic",]$name<-"Syria"
imf[imf$name=="Egypt, Arab Rep.",]$name<-"Egypt"
imf[imf$name=="Trinidad and Tobago",]$name<-"Trinidad-Tobago"
imf[imf$name=="Bahamas, The",]$name<-"Bahamas"
imf[imf$name=="Brunei Darussalam",]$name<-"Brunei"
imf[imf$name=="Korea, Dem. People's Rep.",]$name<-"North Korea"
imf[imf$name=="Korea, Rep.",]$name<-"South Korea"
imf[imf$name=="Bosnia and Herzegovina",]$name<-"Bosnia"
imf[imf$name=="Kyrgyz Republic",]$name<-"Kyrgyzstan"
imf[imf$name=="Cote d'Ivoire",]$name<-"Ivory Coast"
imf[imf$name=="Sao Tome and Principe",]$name<-"Sao Tome"
imf[imf$name=="Cabo Verde",]$name<-"Cape Verde"
imf[imf$name=="North Macedonia",]$name<-"Macedonia"
imf_<-right_join(imf, chn_inv[c("Country","Region")], by=c("name"="Country"))
View(imf_)
imf_<-imf_ %>%
group_by(Year, Region)%>%
mutate(`Annual Total`=sum(IMF_cred, na.rm=T))
View(imf_)
runApp()
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-dplyr::rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
imf[imf$name=="Venezuela, RB",]$name<-"Venezuela"
imf[imf$name=="United Arab Emirates",]$name<-"UAE"
imf[imf$name=="United Kingdom",]$name<-"Britain"
imf[imf$name=="United States",]$name<-"USA"
imf[imf$name=="Lao PDR",]$name<-"Laos"
imf[imf$name=="Iran, Islamic Rep.",]$name<-"Iran"
imf[imf$name=="Yemen, Rep.",]$name<-"Yemen"
imf[imf$name=="Congo, Dem. Rep.",]$name<-"Democratic Republic of the Congo"
imf[imf$name=="Congo, Rep.",]$name<-"Congo"
imf[imf$name=="Syrian Arab Republic",]$name<-"Syria"
imf[imf$name=="Egypt, Arab Rep.",]$name<-"Egypt"
imf[imf$name=="Trinidad and Tobago",]$name<-"Trinidad-Tobago"
imf[imf$name=="Bahamas, The",]$name<-"Bahamas"
imf[imf$name=="Brunei Darussalam",]$name<-"Brunei"
imf[imf$name=="Korea, Dem. People's Rep.",]$name<-"North Korea"
imf[imf$name=="Korea, Rep.",]$name<-"South Korea"
imf[imf$name=="Bosnia and Herzegovina",]$name<-"Bosnia"
imf[imf$name=="Kyrgyz Republic",]$name<-"Kyrgyzstan"
imf[imf$name=="Cote d'Ivoire",]$name<-"Ivory Coast"
imf[imf$name=="Sao Tome and Principe",]$name<-"Sao Tome"
imf[imf$name=="Cabo Verde",]$name<-"Cape Verde"
imf[imf$name=="North Macedonia",]$name<-"Macedonia"
imf_<-right_join(imf, chn_inv[c("Country","Region")], by=c("name"="Country"))
imf_<-imf_ %>%
group_by(Year, Region)%>%
mutate(`Annual Total`=sum(IMF_cred, na.rm=T)/1000000000)
View(imf_)
ggplot(imf_, aes(x=Year, y=`Annual Total`))+
geom_line()+
geom_point()+
labs(x='Year', y='Aid in Billions ($)', title='IMF Aid by Region, 2005-2021')+
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = 'none'
)+
facet_wrap(vars(Region))+
scale_color_manual(values=met.brewer("Renoir", n=9, type='continuous'))
View(imf)
p<-ggplot(imf_, aes(x=Year, y=`Annual Total`))+
geom_line()+
geom_point()+
labs(x='Year', y='Aid in Billions ($)', title='IMF Aid by Region, 2005-2021')+
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = 'none'
)+
facet_wrap(vars(Region))+
scale_color_manual(values=met.brewer("Renoir", n=9, type='continuous'))
p
tot_reg<-read.csv('China-Global-Investment-Tracker-2021-Fall-FINAL-2022.2.21-update.up.csv')%>%
select(Region, Year, Quantity.in.Millions)%>%
group_by(Year, Region)%>%
mutate(Total=sum(as.numeric(gsub("[[:punct:]]", "", Quantity.in.Millions)))/100)
ggplot(tot_reg, aes(x=Year, y=Total, color=Region))+
geom_line()+
geom_point()+
labs(x='Year', y='Aid in Billions ($)', title='Chinese Aid by Region, 2005-2021')+
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = 'none'
)+
facet_wrap(vars(Region))+
scale_color_manual(values=met.brewer("Renoir", n=9, type='continuous'))
imf_<-right_join(imf, chn_inv[c("Country","Region")], by=c("name"="Country"))
imf_<-imf_ %>%
group_by(Year, Region)%>%
mutate(`Annual Total`=sum(IMF_cred, na.rm=T)/1000000000)
ggplot(imf_, aes(x=Year, y=`Annual Total`, color=Region))+
geom_line()+
geom_point()+
labs(x='Year', y='Aid in Billions ($)', title='IMF Aid by Region, 2005-2021')+
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = 'none'
)+
facet_wrap(vars(Region))+
scale_color_manual(values=met.brewer("Renoir", n=9, type='continuous'))
imf_<-right_join(imf, chn_inv[c("Country","Region")], by=c("name"="Country"))
imf_<-imf_ %>%
group_by(Year, Region)%>%
mutate(`Annual Total`=sum(IMF_cred, na.rm=T)/1000000000)
ggplot(imf_, aes(x=Year, y=`Annual Total`, color=Region))+
geom_line()+
geom_point()+
labs(x='Year', y='Aid in Billions ($)', title='IMF Aid by Region, 2005-2021')+
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = 'none'
)+
facet_wrap(vars(Region))+
scale_color_manual(values=met.brewer("Renoir", n=9, type='continuous'))->p
p
ggplotly(p)
runApp()
ggplot(imf_, aes(x=Year, y=`Annual Total`, color=Region))+
geom_line()+
geom_point()+
labs(x='Year', y='Aid in Billions ($)', title='IMF Aid by Region, 2005-2021')+
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
legend.position = 'none'
)+
facet_wrap(vars(Region))+
scale_color_manual(values=met.brewer("Renoir", n=9, type='continuous'))
sum(is.na(filter(imf, Year==2020)$IMF_cred))
sum(!is.na(filter(imf, Year==2020)$IMF_cred))
View(imf)
sum(is.na(filter(imf, Year==2021)$IMF_cred))
sum(is.na(filter(imf, Year==2020)$IMF_cred))
sum(!is.na(filter(imf, Year==2021)$IMF_cred))
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
chn_inv<-read.csv('China-Global-Investment-Tracker-2021-Fall-FINAL-2022.2.21-update.up.csv')
chn_inv<-chn_inv %>%
group_by(Year, Country) %>%
mutate(inv_tot = sum(as.numeric(gsub("[[:punct:]]", "", Quantity.in.Millions))))
View(chn_inv)
chn_inv<-chn_inv %>%
group_by(Country) %>%
mutate(projs=n())
View(chn_inv)
View(filter(chn_inv, Country=="Cuba"))
View(filter(chn_inv, Country=="Oman"))
runApp()
runApp()
runApp()
runApp()
runApp()
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(rgdal))
suppressPackageStartupMessages(library(WDI))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(bslib))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ggthemes))
suppressPackageStartupMessages(library(network))
suppressPackageStartupMessages(library(maps))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MetBrewer))
library(vdemdata)
worldmap = readOGR(dsn="Nat_world_map", layer="ne_50m_admin_0_countries")
worldmap@data[worldmap@data$CONTINENT=="Oceania",]$CONTINENT<-"Australiasia"
imf<-WDI(indicator = "DT.DOD.DIMF.CD", country="all",start=2005, extra=F)
imf<-filter(imf, !country %in% unique(imf$country)[1:49])
imf<-rename(imf, Year=year, name=country, IMF_cred=DT.DOD.DIMF.CD)
unique(worldmap@data$CONTINENT)
View(filter(worldmap@data, CONTINENT=="Seven seas (open ocean)"))
unique(worldmap@data$REGION_UN)
View(filter(worldmap@data, CONTINENT=="Seven seas (open ocean)")[c("NAME","CONTINENT","REGION_UN")])
unique(filter(worldmap@data, CONTINENT=="Seven seas (open ocean)")$NAME)
worldmap@data[worldmap@data$NAME=="S. Geo. and the Is.",]$CONTINENT<-"South America"
worldmap@data[worldmap@data$NAME=="Br. Indian Ocean Ter.",]$CONTINENT<-"Africa"
worldmap@data[worldmap@data$NAME=="Saint Helena",]$CONTINENT<-"Africa"
worldmap@data[worldmap@data$NAME=="Seychelles",]$CONTINENT<-"Africa"
worldmap@data[worldmap@data$NAME=="Mauritius",]$CONTINENT<-"Africa"
worldmap@data[worldmap@data$NAME=="Fr. S. Antarctic Lands",]$CONTINENT<-"Africa"
worldmap@data[worldmap@data$NAME=="Heard I. and McDonald Is.",]$CONTINENT<-"Africa"
worldmap@data[worldmap@data$NAME=="Maldives",]$CONTINENT<-"Asia"
shiny::runApp()
shiny::runApp()
runApp()
